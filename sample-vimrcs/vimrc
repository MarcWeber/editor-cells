set nocompatible
filetype indent plugin on | syn on

for file in ['/tmp/log-vim','/tmp/log-python']
  if file_readable(file) | call delete(file) | endif
endfor

" fun! G() abort
"   for c in g:calls
"     call call('call', c)
"   endfor
" endf

set hidden
" sample vimrc
exec 'set rtp+='.fnameescape(expand('<sfile>:p:h:h'))

" VimL emit implementation
call cells#viml#CellCollection()
" Editor core events implementation
call cells#viml#EditorCoreInterface()
call cells#ProvideAPI()

if 0
  let logger = cells#viml#Cell({})
  fun! logger.l_emit(event)
    echom string(a:event)
  endf
endif

" call cells#viml#vim8_completions#Cell({})
" call cells#viml#vim8_mappings#Cell({})

" you can create multiple cells as you like listening to events
call cells#viml#Cell({'traits': ['cells#viml#logging#Trait']})
call cells#viml#Cell({'traits': ['cells#viml#ftdetect#Trait', 'cells#viml#mappings#Trait', 'cells#viml#signs#Trait', 'cells#viml#quickfix#Trait']})
let cell_completion = cells#viml#Cell({'traits': ['cells#viml#completions#Trait']})
let cell_completion.limit = 10

" , 'cells#vim8#choice#Trait', 'cells#vim8#emit_to_one#Trait',
" 'cells#input#Trait

fun! CompleteMonths(findstart, base)
  if a:findstart
    " locate the start of the word
    let line = getline('.')
    let start = col('.') - 1
    while start > 0 && line[start - 1] =~ '\a'
      let start -= 1
    endwhile
    return start
  else
    " find months matching with "a:base"
    let res = []
    for m in split("Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec")
      if m =~ '^' . a:base
        call add(res, {'word': m})
      endif
    endfor
    return res
  endif
endfun

fun! SetupVimTestCells() " [VIML ONLY]
  call append('$', ['','','',''])

  let traits = {
        \ 'TestMappings' : 'cells#examples#TraitTestMappings',
        \ 'TestSigns' : 'cells#examples#TraitTestSigns',
        \ 'TestQuickfix' : 'cells#examples#TraitTestQuickfix',
        \ 'TestCompletionThisBuffer' : 'cells#examples#TraitTestCompletionThisBuffer',
        \ 'TestCompletionAllBuffers' : 'cells#examples#TraitTestCompletionAllBuffers',
        \ 'CompletionLastInsertedTexts' : 'cells#examples#TraitCompletionLastInsertedTexts',
        \ 'CompletionContext' : 'cells#examples#TraitCompletionContext',
        \ }
  for [k, t] in items(traits)
    call cells#viml#Cell({'traits': [t], 'id': k})
  endfor

  call cells#viml#Cell({'traits': ['cells#examples#TraitCompletionFromCompletionFunction'], 'complete-functions': [{'complete-function': 'CompleteMonths', 'filepath_regex': '.*'}] })

  sp | enew
  call append('$', [
        \ 'there should be one sign at buffer 1',
        \ 'quickfix list should have one line with text ',
        \ ])
  noremap <F10> :qa!<cr>
endf


fun! SetupVimTestCellsCompletionAutoTrigger() " [VIML ONLY]
  call append('$', ['','','',''])

  let traits = [
        \ 'cells#examples#TraitTestCompletionThisBuffer',
        \ 'cells#examples#TraitTestCompletionAllBuffers',
        \ 'cells#examples#TraitCompletionLastInsertedTexts',
        \ 'cells#examples#TraitCompletionContext',
        \ ]
  for t in traits
    call cells#viml#Cell({'traits': [t]})
  endfor

  let by_filetype = []
  call add(by_filetype, {
    \ 'filepath_regex' : '.*',
    \ 'when_regex_matches_current_line': '\w|',
    \ 'completing_cells': ['all']
    \ })
  call cells#viml#Cell({'traits': ['cells#viml#completions#TraitAutoTrigger'], 'by_filetype':  by_filetype})

  e /tmp/x.vim | enew
  call append('$', [
        \ 'let foo = 7',
        \ '  ',
        \ ])
  noremap <F10> :qa!<cr>
endf

let s:this_dir = expand('<sfile>:p:h')

fun! SetupPyInsideVimTestCells() " [python2, within_vim]
  " Python2 code without asyncio examples
  " Runs in main thread within Vim
  " You may want to use the py3 code instead see below

  for py_cmd in  ['python3']
    if has(py_cmd)
      call cells#viml_py2_inside_vim#setupPython(py_cmd)
    endif
  endfor

  let c = cells#viml#Cell({})
  fun! c.l_project_files(event)
    call self.reply_now(a:event, cells#util#Flatten1(map([s:this_dir.'/**/*.vim', s:this_dir.'/**/*.py', s:this_dir.'/README.md'], 'split(glob(v:val), "\n")')))
  endf

if has('python3')
py3 << END
import cells.examples
# cells.examples.Completion() # works (except camel case like matching
cells.examples.Mappings() # TODO
cells.examples.Signs()    # TODO
cells.examples.Quickfix() # TODO
cells.examples.CompletionBasedOnFiles() # TODO
END
endif
endf


fun! SetupProjectFilesCell()
  " setup a cell returning project files, can be used by python completion
  " example CompletionBasedOnFiles
  let c = cells#viml#Cell({})
  fun! c.l_project_files(event)
    call self.reply_now(a:event, cells#util#Flatten1(map([s:this_dir.'/**/*.vim', s:this_dir.'/**/*.py', s:this_dir.'/README.md'], 'split(glob(v:val), "\n")')))
  endf
endf

fun! SetupPy3AsyncioTestCellsWithinVim() " [python3 within_vim]
  " provide list of filepath for CompletionBasedOnFiles
  call SetupProjectFilesCell()

  let bridge_cell = cells#viml_py3_inside_vim#BridgeCell()

  call bridge_cell.cell_new_by_name({'name': 'cells.asyncio.examples.CompletionBasedOnFiles', 'args': [], 'kwargs': {'id': 'CompletionBasedOnFiles'}})

  let by_filetype = []
  call add(by_filetype, {
    \ 'filepath_regex' : '.*',
    \ 'when_regex_matches_current_line': '\w|',
    \ 'completing_cells': ['all']
    \ })
  call cells#viml#Cell({'traits': ['cells#viml#completions#TraitAutoTrigger'], 'by_filetype':  by_filetype})
endf


fun! SetupPy3TestCellsExternalProcess() " [python3 external_process]
  " provide list of filepath for CompletionBasedOnFiles
  call SetupProjectFilesCell()

  let py3_cell_collection_cell = cells#viml#Cell({'traits': ['cells#vim8#CellCollectionExternalProcessTrait'], 'cmd': ['python', s:this_dir.'/../bin/py3cellcollection.py', '--debug'], 'pipe_dump_prefix' : 'py3' })
  " call py3_cell_collection_cell.cell_new_by_name({'name': 'cells.examples.Mappings'})
  " call py3_cell_collection_cell.cell_new_by_name({'name': 'cells.examples.Signs'})
  " call py3_cell_collection_cell.cell_new_by_name({'name': 'cells.examples.Quickfix'})
  " call py3_cell_collection_cell.cell_new_by_name({'name': 'cells.examples.CompletionBasedOnFiles'})
  " call py3_cell_collection_cell.cell_new_by_name({'name': 'cells.examples.Completion'})
  call py3_cell_collection_cell.cell_new_by_name({'name': 'cells.asyncio.examples.CompletionBasedOnFiles', 'args': [], 'kwargs': {'id': 'CompletionBasedOnFiles'}})

  let by_filetype = []
  call add(by_filetype, {
    \ 'filepath_regex' : '.*',
    \ 'when_regex_matches_current_line': '\w|',
    \ 'completing_cells': ['all']
    \ })
  call cells#viml#Cell({'traits': ['cells#viml#completions#TraitAutoTrigger'], 'by_filetype':  by_filetype})
endf

" echom 'use the following examples call SetupVimTestCells | call SetupVimTestCells()'

if cells#vim_dev#GotoError('first') | cfirst | endif
nnoremap <esc>. :cnext<cr>

command First call cells#vim_dev#GotoError('first')
