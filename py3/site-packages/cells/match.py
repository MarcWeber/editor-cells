#!/usr/bin/env python

# code matching strings

import re

def match_regex_str(word, type):
    anychar = '[a-zA-Z0-9_-]'
    if type == 'camel_case_like':
        return CamelCaseLikeMatching(word)
    if type == 'ignore_case':
        return '(?i)'+word+anychar+'*'
    if type == 'last_upper':
        return  CamelCaseLikeMatching(word[0:-1])+word[-1].lower()+'\\b' if re.match('.*[A-Z]$', word) else None
    if type == 'prefix':
        return  word
    if type == 'ycm_like':
        return ''.join([c+anychar+'*' for c in word])
    raise Exception('unkown match_regex_str type '+type)


def CamelCaseLikeMatching(expr):
    result = ''
    if (len(expr) > 10):
      return None

    # no unicode support - shit
    re_upper = re.compile("[A-Z]")
    re_lower = re.compile('[a-z]')

    for c in expr:
        if re_upper.match(c):
            result += c+'[A-Z]*[a-z_]*'
        elif re_lower.match(c):
            result += c+'[A-Za-z_]*'
        else:
            result += c
    return result


def match_score_function_default_impl(word):
    re_camel_case_like = re.compile('^'+match_regex_str(word, "camel_case_like"))
    re_prefix =          re.compile('^'+match_regex_str(word, "prefix"))
    re_ignore_case =     re.compile('^'+match_regex_str(word, "prefix"))

    def match(s):
        if re_camel_case_like.match(s):
            return 2
        if re_prefix.match(s):
            return 1.5
        if re_ignore_case.match(s):
            return 0.5
        return 0

    return match

match_score_function = match_score_function_default_impl
