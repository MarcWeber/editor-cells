#!/usr/bin/env python
import cells.util as util
import cells.asyncio as cells

class NativeEditorImplementation(cells.Cell):
    # TODO move into utils file or such
    # this is actually very useful

    # usage NativeEditorImplementation() -> create singleton
    # (or override it) because id is already set
    # then isntead of using l_editor_buffers use l_py_editor_buffers

    def __init__(self, *args, **kwargs):
        kwargs['id'] = cells.cell_collection.singleton_id('NativeEditorImplementation')
        super(NativeEditorImplementation, self).__init__(*args, **kwargs)
        try:
            self.vim = __import__('vim')
            if not hasattr(self.vim, 'current'):
                delattr(self, 'vim')
        except:
            1/1

    async def l_py_editor_buffers(self, event):
        if hasattr(self, 'vim'):
            # TODO
            await self.forward_event(event, {'type': 'editor_buffers'})
        else:
            await self.forward_event(event, {'type': 'editor_buffers'})

    async def l_py_editor_buffer_lines(self, event):
        if hasattr(self, 'vim'):
            bufid = event.get('bufid', '%')
            if bufid == '%':
                buffer = self.vim.current.buffer
            else:
                buffer = self.vim.buffers[int(bufid)]
            lines = buffer[int(event.get('from_line', 0)):util.int_or_none(event.get('to_line', None))]
            event['reply_now'](self.id, lines)
        else:
            await self.forward_event(event, {'type': 'editor_buffer_lines'})

