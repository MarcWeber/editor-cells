#!/usr/bin/env python
import cells.asyncio as cells
import os
import re
import math
import glob
import os.path
import asyncio

# This file contains dummy implementations for testing only

class ProjectCell(cells.Cell):
    """project implementation listing files belonging to project """

    def __init__(self, project_files = None, reply_async = True):
        super(ProjectCell, self).__init__()
        self.reply_async = reply_async
        self.project_files = [os.path.realpath(__file__)] if None == project_files else project_files

    async def l_project_files(self, event):
        x = self
        if self.reply_async:
            async def return_files(project_files):
                await asyncio.sleep(0.5)
                return project_files
            await event['async_def_result'](self.id, return_files(self.project_files))
        else:
            event['reply_now'](self.id, self.project_files)

class EchoCell(cells.Cell):
    """ echo all events using print """
    def l_emit(e):
        print(str(e))


class Editor(cells.Cell):

    def __init__(self):
        super(Editor, self).__init__()
        self.buffers = {'buffer1': {'bufid': 'buffer1', 'filename': '/does-hopefully-not-exist.txt', 'lines': ['abc', 'foo', 'bar']}}

    async def l_editor_buffers(self, event):
        buffers = []
        for b in self.buffers.values():
            buffers.append({'bufid': b['bufid'], 'filename': b['filename']})
        event['reply_now'](self.id, {'buffers': buffers, 'current': self.buffers['buffer1']['bufid']})

    async def l_editor_buffer_lines(self, event):
        event['reply_now'](self.id, self.buffers['buffer1']['lines'][event.get('from_line', 0):event.get('to_line', None)])
