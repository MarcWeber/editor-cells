#push!/usr/bin/env python
import json
import tempfile
import cells.asyncio.error_line_parsers as elp

import traceback
import cells.asyncio as cells_a
import cells.util as util
import re
import os
import math
import glob
import os.path
import asyncio
import tempfile

from os import path

from cells.debug import debug_str
from cells.asyncio.jsonrpc import JsonRPC

def find_extensions(path):
    # "" for webpack.config.js or such
    for ext in ["", ".tsx", ".ts", ".jsx", ".js"]:
        p = path + ext
        if path.exists(p):
            return p


def find_js_file_from_require(require, file_path):
    locations = []

    wd, last = file_path, True
    while last:
        wd, last = path.split(wd)
        path_package = path.join(wd, 'node_modules', require)
        debug_str("testing %s " % path_package)

        if path.exists(path_package):
            package_json = path.join(path_package, "package.json")
            if path.exists(package_json):
                    # find
                    j = json.load(open(package_json,"r"))
                    if 'main' in j:
                        return find_extensions(path.join(path_package, j['main']))
            else:
                        return path_package


class JSCell(cells_a.Cell):
    """ some utility features because tsserver / vscode sucks at some thnigs """

    def __init__(self, *args, **kwargs):
        debug_str("GOT INITIALIZED")
        super(JSCell, self).__init__(*args, **kwargs)

    async def l_definitions(self, event):
        debug_str("got event")
        r = self.CursorContext_To_Position(event)
        event['reply_now'](self.id, r)


    def CursorContext_To_Position(self, cursor_context):
        dirn = path.dirname(cursor_context['filepath'])
        line = ''.join(cursor_context['line_split_at_cursor'])

        # need to take more care if there are multiple require lines
        re_require = re.compile(".*require\(['\"]([^'\"]+)['\"]\)")
        match = re_require.match(line)
        location = None
        if (match):
            m = match.group(1)
            if m[0] == ".":
                # relative
                location = find_extensions(path.join(dirn, m + ext))
            else:
                location = find_js_file_from_require(m, dirn )

        r = []
        if location != None:
            r.append({'filepath': location})

        return r



