#!/usr/bin/env python

# cellcollection py3 to be used within Vim (:py command),
# see  SetupPy3TestCellsAsPyThreadWithinVim() in sample-vimrcs/vimrc

import os
import asyncio
import cells.asyncio as cells_a
from  cells.debug  import debug_str
import json
import copy
from asyncio.streams import StreamWriter, FlowControlMixin
import traceback

loop = asyncio.get_event_loop()
writer = None
receiving_cell_id = None
controllernotreplying = False


# EVENTS TO STDOUT
class CellEventToVim(cells_a.Cell):

    def __init__(self, **kwargs):
        super(CellEventToVim, self).__init__(**kwargs)

    async def l_emit(self, event):
        debug_str("thinking about to emit to vim %s " % str(event) )

        if event['event']['origin_network'] == cells_a.cell_collection.prefix:

            import vim
            import cells.util
            event_ = copy.copy(event['event'])
            cells_a.cell_collection.clean_event(event_)
            debug_str("to vim %s \n" % str(event_))
            cells.util.to_vim(event_)
            event_ = vim.eval('cells#util#EmitReturn(g:to_vim)')

            for k in ['results', 'wait_for']:
                if k in event_:
                    event['event'][k] += event_[k]

def setup(prefix):
    cells_a.cell_collection = cells_a.CellCollection(prefix)
    cells_a.CellPy(id = "%s-%s" % (prefix, "collection"))
    CellEventToVim(id="CellEventToVim")

events_to_be_processed = []
def process_event(event):
    events_to_be_processed.append(event)

def process(wait_for_ms):

    async def process_py_events():
        while len(events_to_be_processed) > 0:
            event = events_to_be_processed.pop(0)
            debug_str("got event on py within vim %s \n" % str(event))
            try:
                debug_str("emitting %s" % str(event))
                await cells_a.emit(event)
                if 'wait_for_id__for_requesting_cell' in event:
                    # return immediate results
                    immediate_reply = cells_a.Cell.reply_event(event, {'results': event['results'], 'wait_for': event['wait_for'], 'wait_for_id': event['wait_for_id__for_requesting_cell'], 'origin_network': cells_a.cell_collection.prefix})
                    debug_str("immediate reply is %s \n" % str(immediate_reply))
                    await cells_a.emit(immediate_reply)
            except Exception as e:
                debug_str(traceback.format_exc())
                raise e

    async def p():
        try:
            # pass events to handlers
            await process_py_events()
            # run handlers for wait_for_ms
            await asyncio.wait(asyncio.Task.all_tasks(), timeout = float(wait_for_ms) / 1000 )
        except Exception as e:
            debug_str(traceback.format_exc())
        loop.stop()

    asyncio.Task(p())
    loop.run_forever()

    return len(asyncio.Task.all_tasks())
