import cells
import vim
from cells.py import Cell
import re
import math

class Completion(Cell):
    """Docstring for CompletionBasedOnOpenBuffers. """

    def l_completions(self, event):
        """ sample implemenattion illustrating how word completion within a buffer
            can be done showing words nearby the cursor rated higher
            implementing multiple match_types."""

        print(str(event))
        words_ = re.split('[ \t\r\n.{}()<>\'"]', event['event']['line_split_at_cursor'][0])
        word_before_cursor = words_[-1]

        words = {}
        linenr = 1

        for line in vim.current.buffer[:]:
            for w in line.split(' '):
                if (w == word_before_cursor):
                    continue
                line_diff = linenr - int(event['event']['position'][1])
                if line_diff > 100:
                    certainity = 1
                else:
                    # words in lines nearby cursor are more important ..
                    certainity = 1 + abs(100.0 - line_diff) / 500
                if linenr > int(event['event']['position'][1]):
                    # lines below cursor are less important than above cursor
                    certainity = math.sqrt(certainity)
                words[w] = {'word': w, 'certainity': certainity, 'description': w+' (py)'}
            linenr += 1

        completions = cells.util.match_by_type(words.values(), word_before_cursor, event['event']['match_types'])
        print("replying comp", str(completions))
        self.reply_now(event, [{ 'column': int(event['event']['position'][2]) - len(word_before_cursor), 'completions' : completions }])


class Mappings(Cell):
    """Tell the editor about some mappings"""

    def __init__(self):
        super(Mappings, self).__init__()
        cells.emit({'type': 'mappings_changed', 'sender': self.id})

    def l_mappigns(self, event):
        mappings = []
        mappings.append({'scope': 'global',                 'mode': 'normal', 'lhs': '<f5>', 'emit_event': {'type': 'do_echo', 'text': 'scope=g f5 was hit, from pyhton'}})
        mappings.append({'scope': 'bufnr:4',                'mode': 'normal', 'lhs': '<f6>', 'emit_event': {'type': 'do_echo', 'text': 'scope=g f6 was hit, from pyhton'}})
        mappings.append({'scope': 'filename_regex:\.js$',   'mode': 'normal', 'lhs': '<f7>', 'emit_event': {'type': 'do_echo', 'text': 'scope=g f7 was hit, from pyhton'}})
        self.reply_now(event, mappings)

    def l_do_echo(self, event):
        cells.Log(event.text)

class Signs(Cell):

    def __init__(self):
        super(Signs, self).__init__()
        cells.emit({'type': 'signs_changed', 'sender': self.id})

    def l_signs(self, event):
         self.reply_now(event, [{'bufnr': 1, 'name': 'test', 'category' : 'test', 'definition': 'text=-', 'signs': [{'line': 2, 'comment': 'comment about sign - on line 2, from python' }]}])

class Quickfix(Cell):

    def __init__(self):
        super(Quickfix, self).__init__()
        cells.emit({'type': 'quickfix_list_available', 'sender': self.id})

    def l_quickfix_list(self, event):
        self.reply_now(event, {'truncated': False, 'list': [{'bufnr': 1, 'text': 'error', 'col': 10, 'lnum': 5, 'type' : 'E'}]})

